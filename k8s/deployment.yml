---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  selector:
    matchLabels:
      app: zookeeper
  replicas: 1
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: zookeeper
          ports:
            - containerPort: 2181
--- 
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 2181
      name: zookeeperlistenport
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: broker
spec:
  selector:
    app: broker
  ports:
    - protocol: TCP
      port: 9092
      name: brokerlistenport
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: broker
  labels:
    app: broker
spec:
  selector:
    matchLabels:
      app: broker
  replicas: 1
  template:
    metadata:
      labels:
        app: broker
    spec:
      containers:
        - name: broker
          image: wurstmeister/kafka
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_CREATE_TOPICS
              value: "twitter:1:1,channel:1:1"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "broker"
            - name: KAFKA_ADVERTISED_PORT
              value: "9092"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ZOOKEEPER_TIMEOUT_MS
              value: "30000"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: namenode
  labels:
    app: namenode
spec:
  selector:
    matchLabels:
      app: namenode
  replicas: 1
  template:
    metadata:
      labels:
        app: namenode
    spec:
      volumes:
        - name: namenode
          persistentVolumeClaim:
            claimName: namenode
      containers:
        - name: namenode
          image: uhopper/hadoop-namenode
          volumeMounts:
          - name: namenode
            mountPath: /hadoop/dfs/name
          env:
          - name: CORE_CONF_fs_defaultFS
            value: "hdfs://namenode:8020"
          - name: HDFS_CONF_dfs_replication
            value: "1"
          - name: CLUSTER_NAME
            value: "data_pipeline_cluster"
          ports:
          - containerPort: 50070
---
apiVersion: v1
kind: Service
metadata:
  name: namenode
spec:
  selector:
    app: namenode
  ports:
    - protocol: TCP
      port: 50070
      name: internallhadoopport
    - protocol: TCP
      port: 8020
      name: externalhadoopport
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datanode1
  labels:
    app: datanode1
spec:
  selector:
    matchLabels:
      app: datanode1
  replicas: 1
  template:
    metadata:
      labels:
        app: datanode1
    spec:
      volumes:
        - name: datanode1
          persistentVolumeClaim:
            claimName: datanode1
      containers:
        - name: datanode1
          image: uhopper/hadoop-namenode
          volumeMounts:
          - name: datanode1
            mountPath: /hadoop/dfs/data
          env:
          - name: CORE_CONF_fs_defaultFS
            value: "hdfs://namenode:8020"
          - name: HDFS_CONF_dfs_replication
            value: "1"
          - name: CLUSTER_NAME
            value: "data_pipeline_cluster"
          ports:
          - containerPort: 50075
---
apiVersion: v1
kind: Service
metadata:
  name: datanode1
spec:
  selector:
    app: datanode1
  ports:
    - protocol: TCP
      port: 50075
      name: hadoopdataport
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flume
  labels:
    app: flume
spec:
  selector:
    matchLabels:
      app: flume
  replicas: 1
  template:
    metadata:
      labels:
        app: flume
    spec:
      containers:
        - name: flume
          image: v3nd3774/data_pipeline:flume
          env:
          - name: CORE_CONF_fs_defaultFS
            value: "hdfs://namenode:8020"
          ports:
          - containerPort: 2181
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-exporter
  labels:
    app: kafka-exporter
spec:
  selector:
    matchLabels:
      app: kafka-exporter
  replicas: 1
  template:
    metadata:
      labels:
        app: kafka-exporter
    spec:
      containers:
        - name: kafka-exporter
          image: danielqsj/kafka-exporter
          args: ['--kafka.server=broker:9092', "--web.listen-address=0.0.0.0:1337"]
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-exporter
spec:
  selector:
    app: kafka-exporter
  ports:
    - protocol: TCP
      port: 1337
      name: kafkaexporterweblistenport
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hdfs-directory-exporter
  labels:
    app: hdfs-directory-exporter
spec:
  selector:
    matchLabels:
      app: hdfs-directory-exporter
  replicas: 1
  template:
    metadata:
      labels:
        app: hdfs-directory-exporter
    spec:
      containers:
        - name: hdfs-directory-exporter
          image: v3nd3774/data_pipeline:hdfs_directory_exporter
          env:
          - name: CORE_CONF_fs_defaultFS
            value: "hdfs://namenode:8020"
          ports:
          - containerPort: 42069
---
apiVersion: v1
kind: Service
metadata:
  name: hdfs-directory-exporter
spec:
  selector:
    app: hdfs-directory-exporter
  ports:
    - protocol: TCP
      port: 42069
      name: hdfsexporterweblistenport
  type: LoadBalancer
---
# for some reason prometheus isn't scraping kafka-exporter. maybe add dependency to kafka-exporter?
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: v3nd3774/data_pipeline:prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      name: prometheuswebserverport
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: v3nd3774/data_pipeline:grafana
          env:
          - name: GF_SECURITY_ADMIN_USER
            value: "michael"
          - name: GF_SECURITY_ADMIN_PASSWORD
            value: "myers"
          - name: GF_USERS_ALLOW_SIGN_UP
            value: "false"
          ports:
          - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      name: grafanawebserverport
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
spec:
  selector:
    matchLabels:
      app: gateway
  replicas: 1
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
        - name: gateway
          image: v3nd3774/data_pipeline:gateway
          env:
          - name: CORE_CONF_fs_defaultFS
            value: "hdfs://namenode:8020"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: namenode
  labels:
    app: data-pipeline
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 128Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: datanode1
  labels:
    app: data-pipeline
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 128Mi
